import { SSMClient } from "@aws-sdk/client-ssm";
import { MatchersV3, PactV3 } from "@pact-foundation/pact";
import * as path from "path";
import { OrdersService } from "../index";

/**
 * Running test creates a consumer driven pact against the provider order service.
 * The output is a .json file which will be added to the pact directory.
 * If you have a pact broker established, the pact json could be uploaded to the pact broker to establish the contract.
 * The provider, order service could either retrieve the pact from the pact broker (ideal), or by reading the .json file directly (not scalable).
 */
describe("Consumer Driven Contract Tests", () => {
  describe("example-consumer-service testing provider order-service", () => {
    const ordersProvider = new PactV3({
      dir: path.resolve(process.cwd(), "pacts"),
      consumer: "example-consumer-service",
      provider: "orders-service",
    });

    describe("post /orders", () => {
      it("should return a response matching the contract", async () => {
        ordersProvider
          .given("I need to create an order")
          .uponReceiving("a request to create an order")
          .withRequest({
            method: "POST",
            path: `/orders`,
            headers: { Accept: "application/json" },
            body: {
              customerId: MatchersV3.string(),
              status: MatchersV3.string(),
            },
          })
          .willRespondWith({
            status: 200,
            headers: { "Content-Type": "application/json" },
            /**
             * The below code sets the expectation that the response order service gives will:
             * 1. have a orderId string in the response.
             * 2. have a customerId string in the respose.
             * 3. return a dateTimePlaced in a specific date format (ISO format).
             * 4. have a status in the response.
             **/
            body: MatchersV3.like({
              orderId: MatchersV3.uuid(),
              customerId: MatchersV3.string(),
              dateTimePlaced: MatchersV3.timestamp(
                "yyyy-MM-dd'T'HH:mm:ss.SSSX",
                new Date().toISOString()
              ),
              status: MatchersV3.string(),
            }),
          });

        return ordersProvider.executeTest(async (mockServer) => {
          const orderService = new OrdersService({
            ssmClient: new SSMClient({}),
            // Send the Create Order Request to the mock generated by pact.
            // Pact will respond with a generic object defined by the willRespondWith.
            // If you have any code to process the result you are defining expecations on,
            // you should invoke it here to ensure the interaction you are generating works with your code.
            ordersServiceURL: mockServer.url,
          });

          const response = await orderService.createOrder("ABC123", "NEW");

          expect(response.orderId).toBeTruthy();
        });
      });
    });
  });
});

export {};
